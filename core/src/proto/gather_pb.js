// source: gather.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.gather.GAddEventMemberRequest', null, global);
goog.exportSymbol('proto.gather.GAuthCredentialRequest', null, global);
goog.exportSymbol('proto.gather.GAuthCredentialResponse', null, global);
goog.exportSymbol('proto.gather.GCreateEventRequest', null, global);
goog.exportSymbol('proto.gather.GEventMemberAttendance', null, global);
goog.exportSymbol('proto.gather.GEventMemberRecord', null, global);
goog.exportSymbol('proto.gather.GEventMemberRole', null, global);
goog.exportSymbol('proto.gather.GEventRecord', null, global);
goog.exportSymbol('proto.gather.GFetchEventRequest', null, global);
goog.exportSymbol('proto.gather.GProfileKeyCredentialRequest', null, global);
goog.exportSymbol('proto.gather.GProfileKeyCredentialResponse', null, global);
goog.exportSymbol('proto.gather.GProfileRecord', null, global);
goog.exportSymbol('proto.gather.GServerInfo', null, global);
goog.exportSymbol('proto.gather.GSetEventMemberStateRequest', null, global);
goog.exportSymbol('proto.gather.GUserRecord', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gather.GServerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gather.GServerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gather.GServerInfo.displayName = 'proto.gather.GServerInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gather.GProfileRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gather.GProfileRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gather.GProfileRecord.displayName = 'proto.gather.GProfileRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gather.GUserRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gather.GUserRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gather.GUserRecord.displayName = 'proto.gather.GUserRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gather.GAuthCredentialRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gather.GAuthCredentialRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gather.GAuthCredentialRequest.displayName = 'proto.gather.GAuthCredentialRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gather.GAuthCredentialResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gather.GAuthCredentialResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gather.GAuthCredentialResponse.displayName = 'proto.gather.GAuthCredentialResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gather.GProfileKeyCredentialRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gather.GProfileKeyCredentialRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gather.GProfileKeyCredentialRequest.displayName = 'proto.gather.GProfileKeyCredentialRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gather.GProfileKeyCredentialResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gather.GProfileKeyCredentialResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gather.GProfileKeyCredentialResponse.displayName = 'proto.gather.GProfileKeyCredentialResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gather.GEventMemberRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gather.GEventMemberRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gather.GEventMemberRecord.displayName = 'proto.gather.GEventMemberRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gather.GCreateEventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gather.GCreateEventRequest.repeatedFields_, null);
};
goog.inherits(proto.gather.GCreateEventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gather.GCreateEventRequest.displayName = 'proto.gather.GCreateEventRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gather.GFetchEventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gather.GFetchEventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gather.GFetchEventRequest.displayName = 'proto.gather.GFetchEventRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gather.GEventRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gather.GEventRecord.repeatedFields_, null);
};
goog.inherits(proto.gather.GEventRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gather.GEventRecord.displayName = 'proto.gather.GEventRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gather.GAddEventMemberRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gather.GAddEventMemberRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gather.GAddEventMemberRequest.displayName = 'proto.gather.GAddEventMemberRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gather.GSetEventMemberStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gather.GSetEventMemberStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gather.GSetEventMemberStateRequest.displayName = 'proto.gather.GSetEventMemberStateRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gather.GServerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.gather.GServerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gather.GServerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GServerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicparams: msg.getPublicparams_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gather.GServerInfo}
 */
proto.gather.GServerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gather.GServerInfo;
  return proto.gather.GServerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gather.GServerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gather.GServerInfo}
 */
proto.gather.GServerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicparams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gather.GServerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gather.GServerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gather.GServerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GServerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * required bytes publicParams = 1;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GServerInfo.prototype.getPublicparams = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes publicParams = 1;
 * This is a type-conversion wrapper around `getPublicparams()`
 * @return {string}
 */
proto.gather.GServerInfo.prototype.getPublicparams_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicparams()));
};


/**
 * required bytes publicParams = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicparams()`
 * @return {!Uint8Array}
 */
proto.gather.GServerInfo.prototype.getPublicparams_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicparams()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GServerInfo} returns this
 */
proto.gather.GServerInfo.prototype.setPublicparams = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GServerInfo} returns this
 */
proto.gather.GServerInfo.prototype.clearPublicparams = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GServerInfo.prototype.hasPublicparams = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gather.GProfileRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.gather.GProfileRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gather.GProfileRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GProfileRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: msg.getContent_asB64(),
    profilekeyversion: msg.getProfilekeyversion_asB64(),
    profilekeycommitment: msg.getProfilekeycommitment_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gather.GProfileRecord}
 */
proto.gather.GProfileRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gather.GProfileRecord;
  return proto.gather.GProfileRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gather.GProfileRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gather.GProfileRecord}
 */
proto.gather.GProfileRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProfilekeyversion(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProfilekeycommitment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gather.GProfileRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gather.GProfileRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gather.GProfileRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GProfileRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * required bytes content = 1;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GProfileRecord.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes content = 1;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.gather.GProfileRecord.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * required bytes content = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.gather.GProfileRecord.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GProfileRecord} returns this
 */
proto.gather.GProfileRecord.prototype.setContent = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GProfileRecord} returns this
 */
proto.gather.GProfileRecord.prototype.clearContent = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GProfileRecord.prototype.hasContent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes profileKeyVersion = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GProfileRecord.prototype.getProfilekeyversion = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes profileKeyVersion = 2;
 * This is a type-conversion wrapper around `getProfilekeyversion()`
 * @return {string}
 */
proto.gather.GProfileRecord.prototype.getProfilekeyversion_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProfilekeyversion()));
};


/**
 * required bytes profileKeyVersion = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProfilekeyversion()`
 * @return {!Uint8Array}
 */
proto.gather.GProfileRecord.prototype.getProfilekeyversion_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProfilekeyversion()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GProfileRecord} returns this
 */
proto.gather.GProfileRecord.prototype.setProfilekeyversion = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GProfileRecord} returns this
 */
proto.gather.GProfileRecord.prototype.clearProfilekeyversion = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GProfileRecord.prototype.hasProfilekeyversion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bytes profileKeyCommitment = 3;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GProfileRecord.prototype.getProfilekeycommitment = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * required bytes profileKeyCommitment = 3;
 * This is a type-conversion wrapper around `getProfilekeycommitment()`
 * @return {string}
 */
proto.gather.GProfileRecord.prototype.getProfilekeycommitment_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProfilekeycommitment()));
};


/**
 * required bytes profileKeyCommitment = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProfilekeycommitment()`
 * @return {!Uint8Array}
 */
proto.gather.GProfileRecord.prototype.getProfilekeycommitment_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProfilekeycommitment()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GProfileRecord} returns this
 */
proto.gather.GProfileRecord.prototype.setProfilekeycommitment = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GProfileRecord} returns this
 */
proto.gather.GProfileRecord.prototype.clearProfilekeycommitment = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GProfileRecord.prototype.hasProfilekeycommitment = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gather.GUserRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.gather.GUserRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gather.GUserRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GUserRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    passwordhash: msg.getPasswordhash_asB64(),
    profile: (f = msg.getProfile()) && proto.gather.GProfileRecord.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gather.GUserRecord}
 */
proto.gather.GUserRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gather.GUserRecord;
  return proto.gather.GUserRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gather.GUserRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gather.GUserRecord}
 */
proto.gather.GUserRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPasswordhash(value);
      break;
    case 3:
      var value = new proto.gather.GProfileRecord;
      reader.readMessage(value,proto.gather.GProfileRecord.deserializeBinaryFromReader);
      msg.setProfile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gather.GUserRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gather.GUserRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gather.GUserRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GUserRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProfile();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.gather.GProfileRecord.serializeBinaryToWriter
    );
  }
};


/**
 * required string uuid = 1;
 * @return {string}
 */
proto.gather.GUserRecord.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gather.GUserRecord} returns this
 */
proto.gather.GUserRecord.prototype.setUuid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GUserRecord} returns this
 */
proto.gather.GUserRecord.prototype.clearUuid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GUserRecord.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes passwordHash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GUserRecord.prototype.getPasswordhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes passwordHash = 2;
 * This is a type-conversion wrapper around `getPasswordhash()`
 * @return {string}
 */
proto.gather.GUserRecord.prototype.getPasswordhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPasswordhash()));
};


/**
 * required bytes passwordHash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPasswordhash()`
 * @return {!Uint8Array}
 */
proto.gather.GUserRecord.prototype.getPasswordhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPasswordhash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GUserRecord} returns this
 */
proto.gather.GUserRecord.prototype.setPasswordhash = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GUserRecord} returns this
 */
proto.gather.GUserRecord.prototype.clearPasswordhash = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GUserRecord.prototype.hasPasswordhash = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required GProfileRecord profile = 3;
 * @return {!proto.gather.GProfileRecord}
 */
proto.gather.GUserRecord.prototype.getProfile = function() {
  return /** @type{!proto.gather.GProfileRecord} */ (
    jspb.Message.getWrapperField(this, proto.gather.GProfileRecord, 3, 1));
};


/**
 * @param {!proto.gather.GProfileRecord} value
 * @return {!proto.gather.GUserRecord} returns this
*/
proto.gather.GUserRecord.prototype.setProfile = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GUserRecord} returns this
 */
proto.gather.GUserRecord.prototype.clearProfile = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GUserRecord.prototype.hasProfile = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gather.GAuthCredentialRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gather.GAuthCredentialRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gather.GAuthCredentialRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GAuthCredentialRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    passwordhash: msg.getPasswordhash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gather.GAuthCredentialRequest}
 */
proto.gather.GAuthCredentialRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gather.GAuthCredentialRequest;
  return proto.gather.GAuthCredentialRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gather.GAuthCredentialRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gather.GAuthCredentialRequest}
 */
proto.gather.GAuthCredentialRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPasswordhash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gather.GAuthCredentialRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gather.GAuthCredentialRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gather.GAuthCredentialRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GAuthCredentialRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * required string uuid = 1;
 * @return {string}
 */
proto.gather.GAuthCredentialRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gather.GAuthCredentialRequest} returns this
 */
proto.gather.GAuthCredentialRequest.prototype.setUuid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GAuthCredentialRequest} returns this
 */
proto.gather.GAuthCredentialRequest.prototype.clearUuid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GAuthCredentialRequest.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes passwordHash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GAuthCredentialRequest.prototype.getPasswordhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes passwordHash = 2;
 * This is a type-conversion wrapper around `getPasswordhash()`
 * @return {string}
 */
proto.gather.GAuthCredentialRequest.prototype.getPasswordhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPasswordhash()));
};


/**
 * required bytes passwordHash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPasswordhash()`
 * @return {!Uint8Array}
 */
proto.gather.GAuthCredentialRequest.prototype.getPasswordhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPasswordhash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GAuthCredentialRequest} returns this
 */
proto.gather.GAuthCredentialRequest.prototype.setPasswordhash = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GAuthCredentialRequest} returns this
 */
proto.gather.GAuthCredentialRequest.prototype.clearPasswordhash = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GAuthCredentialRequest.prototype.hasPasswordhash = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gather.GAuthCredentialResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gather.GAuthCredentialResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gather.GAuthCredentialResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GAuthCredentialResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    authcredentialresponse: msg.getAuthcredentialresponse_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gather.GAuthCredentialResponse}
 */
proto.gather.GAuthCredentialResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gather.GAuthCredentialResponse;
  return proto.gather.GAuthCredentialResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gather.GAuthCredentialResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gather.GAuthCredentialResponse}
 */
proto.gather.GAuthCredentialResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthcredentialresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gather.GAuthCredentialResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gather.GAuthCredentialResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gather.GAuthCredentialResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GAuthCredentialResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * required bytes authCredentialResponse = 1;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GAuthCredentialResponse.prototype.getAuthcredentialresponse = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes authCredentialResponse = 1;
 * This is a type-conversion wrapper around `getAuthcredentialresponse()`
 * @return {string}
 */
proto.gather.GAuthCredentialResponse.prototype.getAuthcredentialresponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthcredentialresponse()));
};


/**
 * required bytes authCredentialResponse = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthcredentialresponse()`
 * @return {!Uint8Array}
 */
proto.gather.GAuthCredentialResponse.prototype.getAuthcredentialresponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthcredentialresponse()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GAuthCredentialResponse} returns this
 */
proto.gather.GAuthCredentialResponse.prototype.setAuthcredentialresponse = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GAuthCredentialResponse} returns this
 */
proto.gather.GAuthCredentialResponse.prototype.clearAuthcredentialresponse = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GAuthCredentialResponse.prototype.hasAuthcredentialresponse = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gather.GProfileKeyCredentialRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gather.GProfileKeyCredentialRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gather.GProfileKeyCredentialRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GProfileKeyCredentialRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    profilekeyversion: msg.getProfilekeyversion_asB64(),
    profilekeycredentialrequest: msg.getProfilekeycredentialrequest_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gather.GProfileKeyCredentialRequest}
 */
proto.gather.GProfileKeyCredentialRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gather.GProfileKeyCredentialRequest;
  return proto.gather.GProfileKeyCredentialRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gather.GProfileKeyCredentialRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gather.GProfileKeyCredentialRequest}
 */
proto.gather.GProfileKeyCredentialRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProfilekeyversion(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProfilekeycredentialrequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gather.GProfileKeyCredentialRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gather.GProfileKeyCredentialRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gather.GProfileKeyCredentialRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GProfileKeyCredentialRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * required string uuid = 1;
 * @return {string}
 */
proto.gather.GProfileKeyCredentialRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gather.GProfileKeyCredentialRequest} returns this
 */
proto.gather.GProfileKeyCredentialRequest.prototype.setUuid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GProfileKeyCredentialRequest} returns this
 */
proto.gather.GProfileKeyCredentialRequest.prototype.clearUuid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GProfileKeyCredentialRequest.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes profileKeyVersion = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GProfileKeyCredentialRequest.prototype.getProfilekeyversion = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes profileKeyVersion = 2;
 * This is a type-conversion wrapper around `getProfilekeyversion()`
 * @return {string}
 */
proto.gather.GProfileKeyCredentialRequest.prototype.getProfilekeyversion_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProfilekeyversion()));
};


/**
 * required bytes profileKeyVersion = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProfilekeyversion()`
 * @return {!Uint8Array}
 */
proto.gather.GProfileKeyCredentialRequest.prototype.getProfilekeyversion_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProfilekeyversion()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GProfileKeyCredentialRequest} returns this
 */
proto.gather.GProfileKeyCredentialRequest.prototype.setProfilekeyversion = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GProfileKeyCredentialRequest} returns this
 */
proto.gather.GProfileKeyCredentialRequest.prototype.clearProfilekeyversion = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GProfileKeyCredentialRequest.prototype.hasProfilekeyversion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bytes profileKeyCredentialRequest = 3;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GProfileKeyCredentialRequest.prototype.getProfilekeycredentialrequest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * required bytes profileKeyCredentialRequest = 3;
 * This is a type-conversion wrapper around `getProfilekeycredentialrequest()`
 * @return {string}
 */
proto.gather.GProfileKeyCredentialRequest.prototype.getProfilekeycredentialrequest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProfilekeycredentialrequest()));
};


/**
 * required bytes profileKeyCredentialRequest = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProfilekeycredentialrequest()`
 * @return {!Uint8Array}
 */
proto.gather.GProfileKeyCredentialRequest.prototype.getProfilekeycredentialrequest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProfilekeycredentialrequest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GProfileKeyCredentialRequest} returns this
 */
proto.gather.GProfileKeyCredentialRequest.prototype.setProfilekeycredentialrequest = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GProfileKeyCredentialRequest} returns this
 */
proto.gather.GProfileKeyCredentialRequest.prototype.clearProfilekeycredentialrequest = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GProfileKeyCredentialRequest.prototype.hasProfilekeycredentialrequest = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gather.GProfileKeyCredentialResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gather.GProfileKeyCredentialResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gather.GProfileKeyCredentialResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GProfileKeyCredentialResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    profilekeycredentialresponse: msg.getProfilekeycredentialresponse_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gather.GProfileKeyCredentialResponse}
 */
proto.gather.GProfileKeyCredentialResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gather.GProfileKeyCredentialResponse;
  return proto.gather.GProfileKeyCredentialResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gather.GProfileKeyCredentialResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gather.GProfileKeyCredentialResponse}
 */
proto.gather.GProfileKeyCredentialResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProfilekeycredentialresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gather.GProfileKeyCredentialResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gather.GProfileKeyCredentialResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gather.GProfileKeyCredentialResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GProfileKeyCredentialResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * required bytes profileKeyCredentialResponse = 1;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GProfileKeyCredentialResponse.prototype.getProfilekeycredentialresponse = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes profileKeyCredentialResponse = 1;
 * This is a type-conversion wrapper around `getProfilekeycredentialresponse()`
 * @return {string}
 */
proto.gather.GProfileKeyCredentialResponse.prototype.getProfilekeycredentialresponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProfilekeycredentialresponse()));
};


/**
 * required bytes profileKeyCredentialResponse = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProfilekeycredentialresponse()`
 * @return {!Uint8Array}
 */
proto.gather.GProfileKeyCredentialResponse.prototype.getProfilekeycredentialresponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProfilekeycredentialresponse()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GProfileKeyCredentialResponse} returns this
 */
proto.gather.GProfileKeyCredentialResponse.prototype.setProfilekeycredentialresponse = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GProfileKeyCredentialResponse} returns this
 */
proto.gather.GProfileKeyCredentialResponse.prototype.clearProfilekeycredentialresponse = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GProfileKeyCredentialResponse.prototype.hasProfilekeycredentialresponse = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gather.GEventMemberRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.gather.GEventMemberRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gather.GEventMemberRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GEventMemberRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    profilekeycredentialpresentation: msg.getProfilekeycredentialpresentation_asB64(),
    role: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    state: msg.getState_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gather.GEventMemberRecord}
 */
proto.gather.GEventMemberRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gather.GEventMemberRecord;
  return proto.gather.GEventMemberRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gather.GEventMemberRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gather.GEventMemberRecord}
 */
proto.gather.GEventMemberRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProfilekeycredentialpresentation(value);
      break;
    case 2:
      var value = /** @type {!proto.gather.GEventMemberRole} */ (reader.readEnum());
      msg.setRole(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gather.GEventMemberRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gather.GEventMemberRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gather.GEventMemberRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GEventMemberRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!proto.gather.GEventMemberRole} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * required bytes profileKeyCredentialPresentation = 1;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GEventMemberRecord.prototype.getProfilekeycredentialpresentation = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes profileKeyCredentialPresentation = 1;
 * This is a type-conversion wrapper around `getProfilekeycredentialpresentation()`
 * @return {string}
 */
proto.gather.GEventMemberRecord.prototype.getProfilekeycredentialpresentation_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProfilekeycredentialpresentation()));
};


/**
 * required bytes profileKeyCredentialPresentation = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProfilekeycredentialpresentation()`
 * @return {!Uint8Array}
 */
proto.gather.GEventMemberRecord.prototype.getProfilekeycredentialpresentation_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProfilekeycredentialpresentation()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GEventMemberRecord} returns this
 */
proto.gather.GEventMemberRecord.prototype.setProfilekeycredentialpresentation = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GEventMemberRecord} returns this
 */
proto.gather.GEventMemberRecord.prototype.clearProfilekeycredentialpresentation = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GEventMemberRecord.prototype.hasProfilekeycredentialpresentation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required GEventMemberRole role = 2;
 * @return {!proto.gather.GEventMemberRole}
 */
proto.gather.GEventMemberRecord.prototype.getRole = function() {
  return /** @type {!proto.gather.GEventMemberRole} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.gather.GEventMemberRole} value
 * @return {!proto.gather.GEventMemberRecord} returns this
 */
proto.gather.GEventMemberRecord.prototype.setRole = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GEventMemberRecord} returns this
 */
proto.gather.GEventMemberRecord.prototype.clearRole = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GEventMemberRecord.prototype.hasRole = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes state = 3;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GEventMemberRecord.prototype.getState = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes state = 3;
 * This is a type-conversion wrapper around `getState()`
 * @return {string}
 */
proto.gather.GEventMemberRecord.prototype.getState_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getState()));
};


/**
 * optional bytes state = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getState()`
 * @return {!Uint8Array}
 */
proto.gather.GEventMemberRecord.prototype.getState_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getState()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GEventMemberRecord} returns this
 */
proto.gather.GEventMemberRecord.prototype.setState = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GEventMemberRecord} returns this
 */
proto.gather.GEventMemberRecord.prototype.clearState = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GEventMemberRecord.prototype.hasState = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gather.GCreateEventRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gather.GCreateEventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gather.GCreateEventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gather.GCreateEventRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GCreateEventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    grouppublicparams: msg.getGrouppublicparams_asB64(),
    content: msg.getContent_asB64(),
    authcredentialpresentation: msg.getAuthcredentialpresentation_asB64(),
    initialmembersList: jspb.Message.toObjectList(msg.getInitialmembersList(),
    proto.gather.GEventMemberRecord.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gather.GCreateEventRequest}
 */
proto.gather.GCreateEventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gather.GCreateEventRequest;
  return proto.gather.GCreateEventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gather.GCreateEventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gather.GCreateEventRequest}
 */
proto.gather.GCreateEventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGrouppublicparams(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthcredentialpresentation(value);
      break;
    case 4:
      var value = new proto.gather.GEventMemberRecord;
      reader.readMessage(value,proto.gather.GEventMemberRecord.deserializeBinaryFromReader);
      msg.addInitialmembers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gather.GCreateEventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gather.GCreateEventRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gather.GCreateEventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GCreateEventRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getInitialmembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.gather.GEventMemberRecord.serializeBinaryToWriter
    );
  }
};


/**
 * required bytes groupPublicParams = 1;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GCreateEventRequest.prototype.getGrouppublicparams = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes groupPublicParams = 1;
 * This is a type-conversion wrapper around `getGrouppublicparams()`
 * @return {string}
 */
proto.gather.GCreateEventRequest.prototype.getGrouppublicparams_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGrouppublicparams()));
};


/**
 * required bytes groupPublicParams = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGrouppublicparams()`
 * @return {!Uint8Array}
 */
proto.gather.GCreateEventRequest.prototype.getGrouppublicparams_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGrouppublicparams()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GCreateEventRequest} returns this
 */
proto.gather.GCreateEventRequest.prototype.setGrouppublicparams = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GCreateEventRequest} returns this
 */
proto.gather.GCreateEventRequest.prototype.clearGrouppublicparams = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GCreateEventRequest.prototype.hasGrouppublicparams = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes content = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GCreateEventRequest.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes content = 2;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.gather.GCreateEventRequest.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * required bytes content = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.gather.GCreateEventRequest.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GCreateEventRequest} returns this
 */
proto.gather.GCreateEventRequest.prototype.setContent = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GCreateEventRequest} returns this
 */
proto.gather.GCreateEventRequest.prototype.clearContent = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GCreateEventRequest.prototype.hasContent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bytes authCredentialPresentation = 3;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GCreateEventRequest.prototype.getAuthcredentialpresentation = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * required bytes authCredentialPresentation = 3;
 * This is a type-conversion wrapper around `getAuthcredentialpresentation()`
 * @return {string}
 */
proto.gather.GCreateEventRequest.prototype.getAuthcredentialpresentation_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthcredentialpresentation()));
};


/**
 * required bytes authCredentialPresentation = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthcredentialpresentation()`
 * @return {!Uint8Array}
 */
proto.gather.GCreateEventRequest.prototype.getAuthcredentialpresentation_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthcredentialpresentation()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GCreateEventRequest} returns this
 */
proto.gather.GCreateEventRequest.prototype.setAuthcredentialpresentation = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GCreateEventRequest} returns this
 */
proto.gather.GCreateEventRequest.prototype.clearAuthcredentialpresentation = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GCreateEventRequest.prototype.hasAuthcredentialpresentation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated GEventMemberRecord initialMembers = 4;
 * @return {!Array<!proto.gather.GEventMemberRecord>}
 */
proto.gather.GCreateEventRequest.prototype.getInitialmembersList = function() {
  return /** @type{!Array<!proto.gather.GEventMemberRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gather.GEventMemberRecord, 4));
};


/**
 * @param {!Array<!proto.gather.GEventMemberRecord>} value
 * @return {!proto.gather.GCreateEventRequest} returns this
*/
proto.gather.GCreateEventRequest.prototype.setInitialmembersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.gather.GEventMemberRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gather.GEventMemberRecord}
 */
proto.gather.GCreateEventRequest.prototype.addInitialmembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.gather.GEventMemberRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gather.GCreateEventRequest} returns this
 */
proto.gather.GCreateEventRequest.prototype.clearInitialmembersList = function() {
  return this.setInitialmembersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gather.GFetchEventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gather.GFetchEventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gather.GFetchEventRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GFetchEventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupidentifier: msg.getGroupidentifier_asB64(),
    authcredentialpresentation: msg.getAuthcredentialpresentation_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gather.GFetchEventRequest}
 */
proto.gather.GFetchEventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gather.GFetchEventRequest;
  return proto.gather.GFetchEventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gather.GFetchEventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gather.GFetchEventRequest}
 */
proto.gather.GFetchEventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupidentifier(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthcredentialpresentation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gather.GFetchEventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gather.GFetchEventRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gather.GFetchEventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GFetchEventRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * required bytes groupIdentifier = 1;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GFetchEventRequest.prototype.getGroupidentifier = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes groupIdentifier = 1;
 * This is a type-conversion wrapper around `getGroupidentifier()`
 * @return {string}
 */
proto.gather.GFetchEventRequest.prototype.getGroupidentifier_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupidentifier()));
};


/**
 * required bytes groupIdentifier = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupidentifier()`
 * @return {!Uint8Array}
 */
proto.gather.GFetchEventRequest.prototype.getGroupidentifier_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupidentifier()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GFetchEventRequest} returns this
 */
proto.gather.GFetchEventRequest.prototype.setGroupidentifier = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GFetchEventRequest} returns this
 */
proto.gather.GFetchEventRequest.prototype.clearGroupidentifier = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GFetchEventRequest.prototype.hasGroupidentifier = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes authCredentialPresentation = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GFetchEventRequest.prototype.getAuthcredentialpresentation = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes authCredentialPresentation = 2;
 * This is a type-conversion wrapper around `getAuthcredentialpresentation()`
 * @return {string}
 */
proto.gather.GFetchEventRequest.prototype.getAuthcredentialpresentation_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthcredentialpresentation()));
};


/**
 * required bytes authCredentialPresentation = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthcredentialpresentation()`
 * @return {!Uint8Array}
 */
proto.gather.GFetchEventRequest.prototype.getAuthcredentialpresentation_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthcredentialpresentation()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GFetchEventRequest} returns this
 */
proto.gather.GFetchEventRequest.prototype.setAuthcredentialpresentation = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GFetchEventRequest} returns this
 */
proto.gather.GFetchEventRequest.prototype.clearAuthcredentialpresentation = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GFetchEventRequest.prototype.hasAuthcredentialpresentation = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gather.GEventRecord.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gather.GEventRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.gather.GEventRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gather.GEventRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GEventRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupidentifier: msg.getGroupidentifier_asB64(),
    grouppublicparams: msg.getGrouppublicparams_asB64(),
    content: msg.getContent_asB64(),
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.gather.GEventMemberRecord.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gather.GEventRecord}
 */
proto.gather.GEventRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gather.GEventRecord;
  return proto.gather.GEventRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gather.GEventRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gather.GEventRecord}
 */
proto.gather.GEventRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupidentifier(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGrouppublicparams(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    case 4:
      var value = new proto.gather.GEventMemberRecord;
      reader.readMessage(value,proto.gather.GEventMemberRecord.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gather.GEventRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gather.GEventRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gather.GEventRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GEventRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.gather.GEventMemberRecord.serializeBinaryToWriter
    );
  }
};


/**
 * required bytes groupIdentifier = 1;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GEventRecord.prototype.getGroupidentifier = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes groupIdentifier = 1;
 * This is a type-conversion wrapper around `getGroupidentifier()`
 * @return {string}
 */
proto.gather.GEventRecord.prototype.getGroupidentifier_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupidentifier()));
};


/**
 * required bytes groupIdentifier = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupidentifier()`
 * @return {!Uint8Array}
 */
proto.gather.GEventRecord.prototype.getGroupidentifier_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupidentifier()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GEventRecord} returns this
 */
proto.gather.GEventRecord.prototype.setGroupidentifier = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GEventRecord} returns this
 */
proto.gather.GEventRecord.prototype.clearGroupidentifier = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GEventRecord.prototype.hasGroupidentifier = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes groupPublicParams = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GEventRecord.prototype.getGrouppublicparams = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes groupPublicParams = 2;
 * This is a type-conversion wrapper around `getGrouppublicparams()`
 * @return {string}
 */
proto.gather.GEventRecord.prototype.getGrouppublicparams_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGrouppublicparams()));
};


/**
 * required bytes groupPublicParams = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGrouppublicparams()`
 * @return {!Uint8Array}
 */
proto.gather.GEventRecord.prototype.getGrouppublicparams_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGrouppublicparams()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GEventRecord} returns this
 */
proto.gather.GEventRecord.prototype.setGrouppublicparams = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GEventRecord} returns this
 */
proto.gather.GEventRecord.prototype.clearGrouppublicparams = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GEventRecord.prototype.hasGrouppublicparams = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bytes content = 3;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GEventRecord.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * required bytes content = 3;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.gather.GEventRecord.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * required bytes content = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.gather.GEventRecord.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GEventRecord} returns this
 */
proto.gather.GEventRecord.prototype.setContent = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GEventRecord} returns this
 */
proto.gather.GEventRecord.prototype.clearContent = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GEventRecord.prototype.hasContent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated GEventMemberRecord members = 4;
 * @return {!Array<!proto.gather.GEventMemberRecord>}
 */
proto.gather.GEventRecord.prototype.getMembersList = function() {
  return /** @type{!Array<!proto.gather.GEventMemberRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gather.GEventMemberRecord, 4));
};


/**
 * @param {!Array<!proto.gather.GEventMemberRecord>} value
 * @return {!proto.gather.GEventRecord} returns this
*/
proto.gather.GEventRecord.prototype.setMembersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.gather.GEventMemberRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gather.GEventMemberRecord}
 */
proto.gather.GEventRecord.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.gather.GEventMemberRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gather.GEventRecord} returns this
 */
proto.gather.GEventRecord.prototype.clearMembersList = function() {
  return this.setMembersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gather.GAddEventMemberRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gather.GAddEventMemberRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gather.GAddEventMemberRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GAddEventMemberRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupidentifier: msg.getGroupidentifier_asB64(),
    authcredentialpresentation: msg.getAuthcredentialpresentation_asB64(),
    newmemberprofilekeycredentialpresentation: msg.getNewmemberprofilekeycredentialpresentation_asB64(),
    newmemberrole: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gather.GAddEventMemberRequest}
 */
proto.gather.GAddEventMemberRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gather.GAddEventMemberRequest;
  return proto.gather.GAddEventMemberRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gather.GAddEventMemberRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gather.GAddEventMemberRequest}
 */
proto.gather.GAddEventMemberRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupidentifier(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthcredentialpresentation(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNewmemberprofilekeycredentialpresentation(value);
      break;
    case 4:
      var value = /** @type {!proto.gather.GEventMemberRole} */ (reader.readEnum());
      msg.setNewmemberrole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gather.GAddEventMemberRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gather.GAddEventMemberRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gather.GAddEventMemberRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GAddEventMemberRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {!proto.gather.GEventMemberRole} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * required bytes groupIdentifier = 1;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GAddEventMemberRequest.prototype.getGroupidentifier = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes groupIdentifier = 1;
 * This is a type-conversion wrapper around `getGroupidentifier()`
 * @return {string}
 */
proto.gather.GAddEventMemberRequest.prototype.getGroupidentifier_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupidentifier()));
};


/**
 * required bytes groupIdentifier = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupidentifier()`
 * @return {!Uint8Array}
 */
proto.gather.GAddEventMemberRequest.prototype.getGroupidentifier_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupidentifier()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GAddEventMemberRequest} returns this
 */
proto.gather.GAddEventMemberRequest.prototype.setGroupidentifier = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GAddEventMemberRequest} returns this
 */
proto.gather.GAddEventMemberRequest.prototype.clearGroupidentifier = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GAddEventMemberRequest.prototype.hasGroupidentifier = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes authCredentialPresentation = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GAddEventMemberRequest.prototype.getAuthcredentialpresentation = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes authCredentialPresentation = 2;
 * This is a type-conversion wrapper around `getAuthcredentialpresentation()`
 * @return {string}
 */
proto.gather.GAddEventMemberRequest.prototype.getAuthcredentialpresentation_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthcredentialpresentation()));
};


/**
 * required bytes authCredentialPresentation = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthcredentialpresentation()`
 * @return {!Uint8Array}
 */
proto.gather.GAddEventMemberRequest.prototype.getAuthcredentialpresentation_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthcredentialpresentation()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GAddEventMemberRequest} returns this
 */
proto.gather.GAddEventMemberRequest.prototype.setAuthcredentialpresentation = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GAddEventMemberRequest} returns this
 */
proto.gather.GAddEventMemberRequest.prototype.clearAuthcredentialpresentation = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GAddEventMemberRequest.prototype.hasAuthcredentialpresentation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bytes newMemberProfileKeyCredentialPresentation = 3;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GAddEventMemberRequest.prototype.getNewmemberprofilekeycredentialpresentation = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * required bytes newMemberProfileKeyCredentialPresentation = 3;
 * This is a type-conversion wrapper around `getNewmemberprofilekeycredentialpresentation()`
 * @return {string}
 */
proto.gather.GAddEventMemberRequest.prototype.getNewmemberprofilekeycredentialpresentation_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNewmemberprofilekeycredentialpresentation()));
};


/**
 * required bytes newMemberProfileKeyCredentialPresentation = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNewmemberprofilekeycredentialpresentation()`
 * @return {!Uint8Array}
 */
proto.gather.GAddEventMemberRequest.prototype.getNewmemberprofilekeycredentialpresentation_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNewmemberprofilekeycredentialpresentation()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GAddEventMemberRequest} returns this
 */
proto.gather.GAddEventMemberRequest.prototype.setNewmemberprofilekeycredentialpresentation = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GAddEventMemberRequest} returns this
 */
proto.gather.GAddEventMemberRequest.prototype.clearNewmemberprofilekeycredentialpresentation = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GAddEventMemberRequest.prototype.hasNewmemberprofilekeycredentialpresentation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required GEventMemberRole newMemberRole = 4;
 * @return {!proto.gather.GEventMemberRole}
 */
proto.gather.GAddEventMemberRequest.prototype.getNewmemberrole = function() {
  return /** @type {!proto.gather.GEventMemberRole} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.gather.GEventMemberRole} value
 * @return {!proto.gather.GAddEventMemberRequest} returns this
 */
proto.gather.GAddEventMemberRequest.prototype.setNewmemberrole = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GAddEventMemberRequest} returns this
 */
proto.gather.GAddEventMemberRequest.prototype.clearNewmemberrole = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GAddEventMemberRequest.prototype.hasNewmemberrole = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gather.GSetEventMemberStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gather.GSetEventMemberStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gather.GSetEventMemberStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GSetEventMemberStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupidentifier: msg.getGroupidentifier_asB64(),
    authcredentialpresentation: msg.getAuthcredentialpresentation_asB64(),
    newstate: msg.getNewstate_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gather.GSetEventMemberStateRequest}
 */
proto.gather.GSetEventMemberStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gather.GSetEventMemberStateRequest;
  return proto.gather.GSetEventMemberStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gather.GSetEventMemberStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gather.GSetEventMemberStateRequest}
 */
proto.gather.GSetEventMemberStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupidentifier(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthcredentialpresentation(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNewstate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gather.GSetEventMemberStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gather.GSetEventMemberStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gather.GSetEventMemberStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gather.GSetEventMemberStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * required bytes groupIdentifier = 1;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GSetEventMemberStateRequest.prototype.getGroupidentifier = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes groupIdentifier = 1;
 * This is a type-conversion wrapper around `getGroupidentifier()`
 * @return {string}
 */
proto.gather.GSetEventMemberStateRequest.prototype.getGroupidentifier_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupidentifier()));
};


/**
 * required bytes groupIdentifier = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupidentifier()`
 * @return {!Uint8Array}
 */
proto.gather.GSetEventMemberStateRequest.prototype.getGroupidentifier_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupidentifier()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GSetEventMemberStateRequest} returns this
 */
proto.gather.GSetEventMemberStateRequest.prototype.setGroupidentifier = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GSetEventMemberStateRequest} returns this
 */
proto.gather.GSetEventMemberStateRequest.prototype.clearGroupidentifier = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GSetEventMemberStateRequest.prototype.hasGroupidentifier = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes authCredentialPresentation = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GSetEventMemberStateRequest.prototype.getAuthcredentialpresentation = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes authCredentialPresentation = 2;
 * This is a type-conversion wrapper around `getAuthcredentialpresentation()`
 * @return {string}
 */
proto.gather.GSetEventMemberStateRequest.prototype.getAuthcredentialpresentation_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthcredentialpresentation()));
};


/**
 * required bytes authCredentialPresentation = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthcredentialpresentation()`
 * @return {!Uint8Array}
 */
proto.gather.GSetEventMemberStateRequest.prototype.getAuthcredentialpresentation_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthcredentialpresentation()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GSetEventMemberStateRequest} returns this
 */
proto.gather.GSetEventMemberStateRequest.prototype.setAuthcredentialpresentation = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GSetEventMemberStateRequest} returns this
 */
proto.gather.GSetEventMemberStateRequest.prototype.clearAuthcredentialpresentation = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GSetEventMemberStateRequest.prototype.hasAuthcredentialpresentation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bytes newState = 3;
 * @return {!(string|Uint8Array)}
 */
proto.gather.GSetEventMemberStateRequest.prototype.getNewstate = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * required bytes newState = 3;
 * This is a type-conversion wrapper around `getNewstate()`
 * @return {string}
 */
proto.gather.GSetEventMemberStateRequest.prototype.getNewstate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNewstate()));
};


/**
 * required bytes newState = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNewstate()`
 * @return {!Uint8Array}
 */
proto.gather.GSetEventMemberStateRequest.prototype.getNewstate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNewstate()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gather.GSetEventMemberStateRequest} returns this
 */
proto.gather.GSetEventMemberStateRequest.prototype.setNewstate = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gather.GSetEventMemberStateRequest} returns this
 */
proto.gather.GSetEventMemberStateRequest.prototype.clearNewstate = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gather.GSetEventMemberStateRequest.prototype.hasNewstate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.gather.GEventMemberAttendance = {
  UNKNOWN: 0,
  GOING: 1,
  NOT_GOING: 2
};

/**
 * @enum {number}
 */
proto.gather.GEventMemberRole = {
  CREATOR: 0,
  ADMIN: 1,
  DEFAULT: 2
};

goog.object.extend(exports, proto.gather);
